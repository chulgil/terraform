apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate
spec:
  args:
  - name: service-name
    value: feed-server-preview
  - name: prometheus-url
    value: http://prometheus.monitoring.svc.cluster.local:9090
  metrics:
  - name: success-rate
    # 성공률 측정 (HTTP 200 응답률)
    successCondition: result[0] >= 0.95  # 95% 이상 성공률 요구
    interval: 30s
    count: 3
    provider:
      prometheus:
        address: "{{args.prometheus-url}}"
        query: |
          sum(rate(nginx_http_requests_total{service="{{args.service-name}}",status=~"2.."}[2m])) /
          sum(rate(nginx_http_requests_total{service="{{args.service-name}}"}[2m]))
  - name: response-time
    # 응답 시간 측정
    successCondition: result[0] <= 0.5  # 500ms 이하 응답 시간 요구
    interval: 30s
    count: 3
    provider:
      prometheus:
        address: "{{args.prometheus-url}}"
        query: |
          histogram_quantile(0.95, 
            sum(rate(nginx_http_request_duration_seconds_bucket{service="{{args.service-name}}"}[2m])) by (le)
          )

---
# 간단한 헬스체크 기반 분석 템플릿 (Prometheus가 없는 경우 대안)
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: simple-health-check
spec:
  args:
  - name: service-name
    value: feed-server-preview
  - name: namespace
    value: feed-server-dev
  metrics:
  - name: health-check
    successCondition: result == "Healthy"
    interval: 20s
    count: 5
    provider:
      job:
        spec:
          template:
            spec:
              containers:
              - name: health-checker
                image: curlimages/curl:7.85.0
                command: ["/bin/sh"]
                args:
                - -c
                - |
                  for i in $(seq 1 5); do
                    if curl -f -s http://{{args.service-name}}.{{args.namespace}}.svc.cluster.local:8080/actuator/health > /dev/null; then
                      echo "Healthy"
                      exit 0
                    fi
                    sleep 2
                  done
                  echo "Unhealthy"
                  exit 1
              restartPolicy: Never 