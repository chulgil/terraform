name: Feed Server CI/CD

on:
  push:
    paths:
      - 'service/feed-server/**'
      - '.github/workflows/feed-server-ci.yml'
    branches: [main]
  pull_request:
    paths:
      - 'service/feed-server/**'
      - '.github/workflows/feed-server-ci.yml'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 매일 자정에 실행 (선택사항)

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
  ECR_REPOSITORY: feed-server

jobs:
  check-changes:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    outputs:
      has-changes: ${{ steps.filter.outputs.changes }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 전체 히스토리 가져오기

    - name: Check for changes in feed-server
      id: filter
      run: |
        echo "🔍 feed-server 폴더 변경사항 확인 중..."
        
        # 이벤트 타입에 따른 변경사항 확인
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Pull Request의 경우 base와 비교
          echo "📋 Pull Request 감지됨"
          if git diff --name-only origin/main...HEAD | grep -E "^service/feed-server/" > /dev/null; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "✅ feed-server 폴더에 변경사항이 있습니다."
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "⏭️ feed-server 폴더에 변경사항이 없습니다. 빌드를 건너뜁니다."
          fi
        else
          # Push의 경우 이전 커밋과 비교
          echo "📤 Push 감지됨"
          if git diff --name-only HEAD~1 HEAD | grep -E "^service/feed-server/" > /dev/null; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "✅ feed-server 폴더에 변경사항이 있습니다."
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "⏭️ feed-server 폴더에 변경사항이 없습니다. 빌드를 건너뜁니다."
          fi
        fi
        
        # 변경된 파일 목록 출력 (디버깅용)
        echo "📄 변경된 파일 목록:"
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          git diff --name-only origin/main...HEAD | grep -E "^service/feed-server/" || echo "변경된 파일 없음"
        else
          git diff --name-only HEAD~1 HEAD | grep -E "^service/feed-server/" || echo "변경된 파일 없음"
        fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: check-changes
    if: (needs.check-changes.outputs.has-changes == 'true' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN

    - name: Debug info
      run: |
        echo "GitHub SHA: ${{ github.sha }}"
        echo "GitHub Ref: ${{ github.ref }}"
        echo "GitHub Event: ${{ github.event_name }}"
        echo "Working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Service directory contents:"
        ls -la service/feed-server/ || echo "Service directory not found"
        echo "Java version:"
        java -version || echo "Java not found"
        echo "Gradle version:"
        cd service/feed-server/src && ./gradlew --version || echo "Gradle not found"

    - name: Verify Gradle setup
      run: |
        cd service/feed-server/src
        echo "Checking Gradle wrapper..."
        ls -la gradlew || echo "gradlew not found"
        ls -la gradle/wrapper/ || echo "gradle/wrapper directory not found"
        echo "Testing Gradle wrapper..."
        chmod +x gradlew || echo "Failed to set gradlew permissions"
        ./gradlew --version || echo "Failed to run gradlew"

    - name: Build with Gradle
      run: |
        cd service/feed-server/src
        chmod +x gradlew
        chmod +x gradle/wrapper/gradle-wrapper.jar
        ./gradlew clean build --no-daemon --stacktrace --info

    - name: Run tests
      run: |
        cd service/feed-server/src
        ./gradlew test --no-daemon --stacktrace --info

  build-and-push:
    needs: [check-changes, build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (needs.check-changes.outputs.has-changes == 'true' || github.event_name == 'workflow_dispatch')
    permissions:
      id-token: write
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions

    - name: Verify AWS credentials
      run: |
        echo "AWS Account ID: ${{ secrets.AWS_ACCOUNT_ID }}"
        echo "AWS Region: ${{ env.AWS_REGION }}"
        aws sts get-caller-identity || echo "AWS credentials not configured"

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image to ECR
      run: |
        cd service/feed-server
        docker buildx build --platform linux/amd64 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --push .

    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo install -o root -g root -m 0755 kustomize /usr/local/bin/kustomize
        kustomize version

    - name: Update K8s manifests
      run: |
        echo "Updating kustomization for environment: dev"
        cd service/feed-server/k8s/overlays/dev
        
        # Backup current kustomization
        cp kustomization.yaml kustomization.yaml.bak
        
        # Update image in kustomization
        kustomize edit set image feed-server=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
        
        # Configure git
        git config --global --add safe.directory /github/workspace
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "GitHub Actions Bot"
        
        # Add and commit changes
        git add kustomization.yaml
        if ! git diff --cached --quiet; then
          git commit -m "ci: Update feed-server dev image to ${{ github.sha }}"
          
          # Push changes with retry logic
          for i in {1..3}; do
            if git push; then
              echo "Successfully pushed changes to repository"
              exit 0
            else
              echo "Push attempt $i failed, pulling and retrying..."
              git pull --rebase
              sleep 5
            fi
          done
          echo "Failed to push changes after 3 attempts"
          exit 1
        else
          echo "No changes to commit"
        fi
